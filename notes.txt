import json
import subprocess
import os
from deepdiff import DeepDiff
import yaml

APPSETTINGS = "appsettings.json"
HELM_REPO = "project-helm"
HELM_REPO_URL = "git@your.git.repo/project-helm.git"
ENVS = ["dev", "sit", "qa"]

def get_staged_appsettings():
    result = subprocess.run(["git", "show", f":{APPSETTINGS}"], stdout=subprocess.PIPE, text=True)
    return json.loads(result.stdout)

def get_committed_appsettings():
    result = subprocess.run(["git", "show", f"HEAD:{APPSETTINGS}"], stdout=subprocess.PIPE, text=True)
    return json.loads(result.stdout)

def get_new_keys(old, new):
    diff = DeepDiff(old, new, verbose_level=2)
    added = diff.get("dictionary_item_added", [])
    return [k.replace("root['", "").replace("']", "") for k in added]

def prompt_for_env_values(key):
    return {env: input(f"Enter value for '{key}' in {env}: ") for env in ENVS}

def clone_or_pull_helm_repo():
    if not os.path.exists(HELM_REPO):
        subprocess.run(["git", "clone", HELM_REPO_URL])
    else:
        subprocess.run(["git", "-C", HELM_REPO, "pull"])

def update_values_yaml(env_values):
    for env in ENVS:
        path = os.path.join(HELM_REPO, "env", env, "values.yaml")
        if not os.path.exists(path):
            print(f"‚ö†Ô∏è  Missing: {path}")
            continue
        with open(path) as f:
            data = yaml.safe_load(f) or {}
        for key in env_values:
            data[key] = env_values[key][env]
        with open(path, "w") as f:
            yaml.dump(data, f)
        print(f"‚úÖ Updated: {path}")

def main():
    old = get_committed_appsettings()
    new = get_staged_appsettings()
    new_keys = get_new_keys(old, new)

    if not new_keys:
        print("‚úÖ No new keys added.")
        return

    print(f"üîç New keys detected: {new_keys}")
    env_values = {key: prompt_for_env_values(key) for key in new_keys}

    clone_or_pull_helm_repo()
    update_values_yaml(env_values)

if __name__ == "__main__":
    main()